#+TITLE: Análisis numérico de EDP, Fisymat
#+SUBTITLE:
#+AUTHOR: Ignacio Cordón Castillo
#+OPTIONS: toc:nil
#+LANGUAGE: es
#+STARTUP: indent
#+DATE:

#+latex_header: \usepackage{amsmath}
#+latex_header: \usepackage{amsthm}
#+latex_header: \usepackage[spanish]{babel}
#+latex_header: \newtheorem*{theorem}{Teorema}
#+latex_header: \newtheorem*{fact}{Proposición}
#+latex_header: \newtheorem*{corollary}{Corolario}
#+latex_header: \newtheorem*{lemma}{Proposición}
#+latex_header: \newtheorem*{definition}{Definición}
#+latex_header: \setlength{\parindent}{0pt}
#+latex_header: \setlength{\parskip}{1em}
#+latex_header: \usepackage{color}
#+latex_header: \newenvironment{wording}{\setlength{\parskip}{0pt}\rule{\textwidth}{0.5em}}{~\\\rule{\textwidth}{0.5em}}
#+latex_header: \everymath{\displaystyle}
#+latex_header: \usepackage[left=3.5cm, right=3cm, top=3cm]{geometry}
#+OPTIONS: num:nil
#+SETUPFILE: ../theme-readtheorg.setup
#+attr_latex: :float t :width 4cm
[[../by-nc-sa.png]]

* Ejercicio 1
#+begin_wording
En la simulación numérica de ciertas ecuaciones se proponen condiciones periódicas del siguiente tipo:

\[\begin{cases}
u''(t) - u(t) = f(t) & t\in [0,1]\\
u(0) = u(1)\\
u'(0) = u'(1)
\end{cases}\]

Aplicando las aproximaciones siguientes:

\begin{align*}
& u''(t_n) \approx \frac{u(t_n + h) - 2u(t_n) + u(t_n - h)}{h^2}  \qquad n=0,1, \ldots, N\\
& u'(0) \approx \frac{u(t_0) - u(t_0 - h)}{h}, \quad u'(1) \approx \frac{u(t_{N+1}) - u(t_N)}{h}
\end{align*}

deduce que el sistema $N+1 \times N+1$ a resolver viene dado por:

\[
\underbrace{\frac{1}{h^2} \begin{pmatrix}
  a & 1 & 0 & \ldots & 0 & 1\\
  1 & a & 1 & 0 & \ldots & 0\\
  0 & 1 & a & 1 & \ddots & \vdots\\
  \vdots & \ddots & \ddots & \ddots & \ddots & 0\\
  0 & \ldots & 0 & 1 & a & 1\\
  1 & 0 & \ldots & 0 & 1 & a
\end{pmatrix}}_{A_h} \begin{pmatrix}
  y_0 \\ y_1 \\ y_2 \\ \vdots \\ y_{N-1} \\ y_N
\end{pmatrix} = \begin{pmatrix}
  f_0 \\ f_1 \\ f_2 \\ \vdots \\ f_{N-1} \\ f_N
\end{pmatrix}
\]

donde $a=-2-h^2, f_n = f(t_n)$ e $y_n \approx u(t_n)$ con $n=0,1, \ldots N, N+1 (t_n = nh$ con $h=\frac{1}{N+1} \bigg)$.

Analiza la consistencia, estabilidad y convergencia de dicho método.

A partir del código dado en clase programa el método anterior para $f(t) = cos(\pi t)$. Compara el resultado obtenido con la solución exacta $u(t) = \frac{e^{1-t} - e^t - (-1+e)cos(\pi t)}{(e-1)(1+\pi^2)}$.
#+end_wording

De la condición $u(0) = u(1)$ deducimos $u(t_0) = u(t_{N+1})$.

De $u'(0) = u'(1)$ imponemos $\frac{u(t_0) - u(t_0 - h)}{h} = \frac{u(t_{N+1}) - u(t_N)}{h}$ y por ser $u(t_0) = u(t_N)$ deducimos $u(t_0 - h) = u(t_N)$.

Por tanto sustituyendo las aproximaciones en la ecuación inicial, obtenemos:
\begin{equation}
& \frac{u(t_n + h) - 2u(t_n) + u(t_n - h)}{h^2}  - \frac{h^2 u(t_n)}{h^2} = f(t_n) \qquad n=0,1, \ldots, N
\end{equation}

Es decir:
\begin{align*}
& \frac{y_{n+1} + (- 2 - h^2)y_n + y_{n-1}}{h^2} = f_n \qquad n=1, \ldots, N-1\\
& \frac{y_1 + (- 2 - h^2)y_0 + y_N}{h^2} = f_0 \\
& \frac{y_0 + (- 2 - h^2)y_N + y_{N-1}}{h^2} = f_N
\end{align*}

De donde se deduce el sistema:
\[
\frac{1}{h^2} \begin{pmatrix}
a & 1 & 0 & \ldots & 0 & 1\\
1 & a & 1 & 0 & \ldots & 0\\
0 & 1 & a & 1 & \ddots & \vdots\\
\vdots & \ddots & \ddots & \ddots & \ddots & 0\\
0 & \ldots & 0 & 1 & a & 1\\
1 & 0 & \ldots & 0 & 1 & a
\end{pmatrix} \begin{pmatrix}
y_0 \\ y_1 \\ y_2 \\ \vdots \\ y_{N-1} \\ y_N
\end{pmatrix} = \begin{pmatrix}
f_0 \\ f_1 \\ f_2 \\ \vdots \\ f_{N-1} \\ f_N
\end{pmatrix}
\]

** Consistencia, estabilidad, convergencia
*** Consistencia
El método es consistente, ya que:

\begin{align*}
&\frac{u(t_n+h) - 2u(t_n) + u(t_n -h)}{h^2} - u(t_n) - f(t_n) =\\
&\frac{u((n+1)h) - 2u(nh) + u((n-1)h)}{h^2} - u(nh) - f(nh) = \tau_n
\end{align*}

Haciendo tender $h \rightarrow 0$, llegamos a una indeterminación en:

\[\lim_{h\rightarrow 0} \frac{u((n+1)h) - 2u(nh) + u((n-1)h)}{h^2}\]

Por L'Hôpital, derivando dos veces arriba y abajo nos queda que dicho límite es igual al límite:
\[\lim_{h\rightarrow 0} \frac{(n+1)^2 u''((n+1)h) - 2n^2 u''(nh) + (n-1)^2 u''((n-1)h)}{2} = u''(0)\]


Por tanto, por ser $u$ solución de la EDP:

\[\lim_{h\rightarrow} \tau_n = u''(0) - u(0) - f(0) = 0\]
*** Estabilidad
El método también es estable, ya que los valores propios de $A_h$ son conocidos y vienen dados por:
\[\lambda_p = \frac{1}{h^2} \left( e^{-2\pi i p/(N+1)} - \underbrace{(2+h^2)}_a + e^{2\pi i p/(N+1)} \right) = \frac{1}{h^2} \left( 2cos(2\pi p/(N+1)) - 2 - h^2 \right)\]

Por tanto, por ser $A_h$ simétrica:

\[\lim_{h\rightarrow 0} ||A_h||_2 = \lim_{h\rightarrow 0} \frac{1}{\min{|\lambda_p|}}\]

Y para $p$ arbitrario: 
\begin{align*}
\lim_{h\rightarrow 0} \frac{1}{\lambda_p} &= \lim_{h\rightarrow 0}\frac{h^2}{2cos(2\pi p h) - 2 - h^2} \underset{\textrm{L'Hôpital 2 veces}}{=}\\
&= \lim_{h\rightarrow 0} \frac{2}{-2(2\pi p)^2 cos(2\pi p h) -2} = -\frac{1}{(2\pi p)^2 + 1}
\end{align*}

Luego $\lim_{h\rightarrow 0} ||A_h||_2 = \max_{p} \frac{1}{(2\pi p)^2 + 1} \le 1$ está acotado.

*** Convergencia
El método es consistente y estable, luego por un teorema de clase es convergente.
** Caso particular
Para $f(t) = cos(\pi t)$ y $N = 20$ se tiene:

#+begin_src octave :exports both :results file :tangle ejercicio1.m :cache yes
% solve the periodic boundary value problem 
%       u'' - u = f(t) on [0,1] 
% with Dirichlet conditions u(0) = u(1), u'(0) = u'(1).  
% Modified from http://www.amath.washington.edu/~rjl/fdmbook/chapter3

f = @(t) cos(pi * t)
% True solution to Poisson problem
truefn = @(t) (exp(1-t) - exp(t) -(-1+e)*f(t)) / ((e-1)*(1 + pi*pi))

% number of interior points 
N = 20; 
h = 1/(N + 1);
a = -2 - h*h

% grid points x including boundaries
x = linspace(0, 1, N+1);
X = x';
rhs = f(X);
              
% form matrix A:
A = sparse(N+1, N+1);
% Assign diagonals
A(1:N+2:end) = a
A(2:N+2:end) = 1
A(N+2:N+2:end) = 1
% Assign firs/last 1 of last/first row resp.
A(1 + (N+1)*N) = A(N+1) = 1
A *= 1/(h*h)

% Approximated solution
uapprox = A\rhs;

% True solution for test problem
utrue = truefn(X)

err = max(max(abs(uapprox - utrue)));
fprintf('Error relative to true solution of PDE = %10.3e \n', err)


% plot results:
figure( 1, "visible", "off" )
clf
hold on

% plot true and aproximated solution:
plot(X, utrue, X, uapprox)
title('Plot of approximated and true solution')
legend("True solution", "Approximated solution")
print -dpng ejercicio1.png;
ans = "ejercicio1.png";
#+end_src

#+RESULTS[df3616241b57c1b25352ea1abaeb8503162b5c46]:
[[file:ejercicio1.png]]

* Ejercicio 2
#+begin_wording
Simula a partir del código dado en clase el resultado del problema de valores en la frontera:

\begin{align*}
\Delta u = 2\pi^2 sin(\pi x) cos(\pi y) && (x,y) \in [0,1] \times [0,1]\\
-u(x,0) = u(x,1) = sin(\pi x)\\
 u(0,y) = u(1,y) = 0
\end{align*}

Compara los resultados con la solución exacta $u(x,y) = -cos(\pi y) sin(\pi y)$. Representa los 
errores máximos cometidso en función de $h$ y compara con el análisis de convergencia hecho 
anteriormente.
#+end_wording





#+begin_src octave :session :results none :exports both :tangle ejercicio2-approx.m
% Solve the Poisson problem u_{xx} + u_{yy} = f(x,y) on [a,b] x [a,b]
%
% Based on  http://www.amath.washington.edu/~rjl/fdmbook/chapter3
function approx = poissonApprox(N, a, b, f, truefn)
  h = (b - a)/(N + 1);
  % grid points x including boundaries
  x = linspace(a, b, N + 2);
  % grid points y including boundaries 
  y = linspace(a, b, N + 2);

  % 2d arrays of x,y values
  [X, Y] = meshgrid(x,y);
  X = X';
  Y = Y';

  % indices of interior points in x
  Iint = 2:(N + 1);
  % indices of interior points in y
  Jint = 2:(N + 1);
  % interior points
  Xint = X(Iint, Jint);
  Yint = Y(Iint, Jint);

  % evaluate f at interior points for right hand side
  % rhs is modified below for boundary conditions.
  rhs = arrayfun(f, Xint, Yint);        
  
  % true solution for test problem
  utrue = arrayfun(truefn, X, Y);

  % set boundary conditions around edges of usoln array:
  % use true solution for this test problem
  % This sets full array, but only boundary values
  % are used below.  For a problem where utrue
  % is not known, would have to set each edge of
  % usoln to the desired Dirichlet boundary values.
  usoln = utrue;


  % adjust the rhs to include boundary terms:
  rhs(:, 1) = rhs(:, 1) - usoln(Iint, 1)/h^2;
  rhs(:, N) = rhs(:, N) - usoln(Iint, N + 2)/h^2;
  rhs(1, :) = rhs(1, :) - usoln(1, Jint)/h^2;
  rhs(N, :) = rhs(N, :) - usoln(N + 2, Jint)/h^2;


  % convert the 2d grid function rhs into a column vector for rhs of system:
  % reshape runs through the matrix by columns
  F = reshape(rhs, N * N, 1);

  % form matrix A:
  I = speye(N); % sparse identity matrix
  e = ones(N, 1);
  % [-1 0 1] indicates order of diags, where -1 is the lower-diagonal, 
  % 0 is the main diagonal and 1 is the upper-diagonal
  T = spdiags([e -4*e e], [-1 0 1], N, N);
  S = spdiags([e e], [-1 1], N, N);
  A = (kron(I, T) + kron(S, I)) / h^2;


  % Solve the linear system:
  uvec = A\F;  

  % reshape vector solution uvec as a grid function and 
  % insert this interior solution into usoln for plotting purposes:
  % (recall boundary conditions in usoln are already set) 
  usoln(Iint, Jint) = reshape(uvec, N, N);

  approx = usoln
endfunction

f = @(x, y) 2 * pi * pi * cos(pi * y) * sin(pi * x);
truefn = @(x, y) -cos(pi * y) * sin(pi * x);
% number of points to use
N = 10;
a = 0;
b = 1;

x = linspace(a, b, N + 2);
% grid points y including boundaries 
y = linspace(a, b, N + 2);

% 2d arrays of x,y values
[X, Y] = meshgrid(x, y);
X = X';
Y = Y';

% Compute approximated solution and true solution
approx = poissonApprox(N, a, b, f, truefn)
utrue = arrayfun(truefn, X, Y);
#+end_src

Representamos la solución real y la solución aproximada en 3D, comprobándose que son prácticamente indistinguibles.

#+begin_src octave :session :results file :exports both
% plot approximation
figure(1, "visible", "off" )
clf

% plot surface of the original and the approximation values
mesh(X, Y, approx)
title('Surface of approximated solution')
print -dpng ejercicio2-meshapprox.png;
ans = "ejercicio2-meshapprox.png";
#+end_src

#+RESULTS:
[[file:ejercicio2-meshapprox.png]]
#+begin_src octave :session :results file :exports both
% plot true solution
figure(1, "visible", "off" )

% plot surface of the original and the approximation values
mesh(X, Y, utrue)
title('Surface of real solution')
print -dpng ejercicio2-meshsol.png;
ans = "ejercicio2-meshsol.png";
#+end_src

#+RESULTS:
[[file:ejercicio2-meshsol.png]]

Y representamos los errores de aproximación, comprobando que tienden a 0 conforme $h \rightarrow 0$ 
#+begin_src octave :session :results file :exports both :eval never :tangle ejercicio2-error.m
function error = poissonError(N, a, b, f, truefn)
  approx = poissonApprox(N, a, b, f, truefn)
  h = (b - a)/(N + 1);
  % grid points x including boundaries
  x = linspace(a, b, N + 2);
  % grid points y including boundaries 
  y = linspace(a, b, N + 2);

  % 2d arrays of x,y values
  [X, Y] = meshgrid(x,y);
  X = X';
  Y = Y';
  
  % true solution for test problem
  utrue = arrayfun(truefn, X, Y);
  % assuming true solution is known and stored in utrue:
  error = max(max(abs(approx - utrue)));
endfunction

% plot approximation errors
Ns = 1:1:100
hs = 1./(Ns + 1)
errors = arrayfun(@poissonError, Ns, a, b, f, truefn);

figure(1, "visible", "off" )
clf
hold on
plot(hs, errors, 'k')
xlabel('h value')
ylabel('maximum error')
title('Approximation errors')
print -dpng ejercicio2.png;
ans = "ejercicio2.png";
#+end_src

#+RESULTS:
[[file:ejercicio2.png]]

* Ejercicio 3
#+begin_wording
Justifica mediante análisis de estabilidad matricial la estabilidad incondicional del método de Euler Implícito para la ecuación del calor.

A partir de los códigos vistos en clase programa dicho método y aplícalo a:
\[
u_t = u_{xx}, \quad x\in [0,1], t\in [0,2], \quad u(t,0) = u(t,1) = 0, \quad u(0,x) = sin(\pi x)
\]
y compara los resultados con la solución exacta $u(t,x) = exp(-\pi^2 t) \cdot sin(\pi x)$.
#+end_wording

El método de Euler implícito consiste en hacer:

\[U_j^{n+1} = U_{j}^n + \frac{k}{h^2}\left(U_{j+1}^{n+1} - 2U_{j}^{n+1} + U_{j-1}^{n+1}\right), \quad j=1, \ldots, \frac{1}{h}-1, \quad n= 0, \ldots\]

#+begin_src octave :session :exports both :tangle ejercicio3.m
% Solve u_t = u * u_{xx} on [ax,bx] with Dirichlet boundary conditions,
% using the Crank-Nicolson method with m interior points.
%
%
% Based on http://www.amath.washington.edu/~rjl/fdmbook/heat_CN.m


% Number of interior points
N = 20;
% [0,1] space interval
ax = 0;           
bx = 1;
% [0,2] time interval
tfinal = 2;

h = (bx - ax)/(N + 1);
x = linspace(ax, bx, N + 2)';

% time step, 4* not necessary, since this algorithm hasn't got an stability condition
k = 4*h;
% number of time steps
nsteps = round(tfinal / k);


% true solution for comparison and definition of the boundary conditions
utrue = @(t, x) exp(-pi * pi * t) * sin(pi * x)

% initial conditions:
u0 = utrue(0, x);


% Each time step we solve MOL system U' = AU + g using the Trapezoidal method

% set up matrixes:
r = k/(h^2);
e = ones(N, 1);
A = spdiags([e -2*e e], [-1 0 1], N, N);
A1 = eye(N) - r * A;
A2 = eye(N);


% initial data on fine grid for plotting:
xfine = linspace(ax, bx, 1001);
ufine = utrue(0, xfine);

% initialize u and plot:
tn = 0;
u = u0;

figure(1, "visible", "off" )
clf
hold on

plot(x, u, 'b.-', xfine, ufine, 'r')
legend('computed', 'true')

% main time-stepping loop:
for n = 1:nsteps
  tnp = tn + k;   % = t_{n+1}

  % boundary values u(0,t) = g_0(t) and u(1,t) = g_1(t) at times tn and tnp:
  g0n = u(1);
  g1n = u(N + 2);
  g0np = utrue(tnp, ax);
  g1np = utrue(tnp, bx);

  % compute right hand side for linear system:
  uint = u(2:(N + 1));   % interior points (unknowns)
  rhs = A2*uint;
  % fix-up right hand side using BC's (i.e. add vector g to A2*uint)
  rhs(1) = rhs(1) + r*(g0n + g0np);
  rhs(N) = rhs(N) + r*(g1n + g1np);

  % solve linear system:
  uint = A1\rhs;

  % augment with boundary values:
  u = [g0np; uint; g1np];

  %Plot results
  ufine = utrue(tnp, xfine);
  plot(x, u, 'b.-', xfine, ufine, 'r')

  % for next time step
  tn = tnp;
end

print -dpng ejercicio3.png;
ans = "ejercicio3.png";
#+end_src

#+RESULTS:
[[file:ejercicio3.png]]

* Ejercicio 4
#+begin_wording
Justifique las siguientes fórmulas de derivación numérica y obtenga cotas para el error comentado:
\[
f'(a) \approx \frac{3f(a) - 4f(a-h) + f(a-2h)}{2h}, \qquad f''(a) \approx \frac{f(a) - 2f(a-h) + f(a-2h)}{h^2}
\]
Deduzca a partir de esta aproximación un método de tipo Beam Warming para la ecuación de advección
\[
U_j^{n+1} = U_j^n - \frac{ak}{2h}(3U_j^n - 4U^n_{j-1} + U^n_{j-2}) + \frac{a^2 k^2}{2h^2}(U_j^n - 2U_{j-1}^n + U^n_{j-2})
\]
combinándolo con una discretización temporal de TAylor de orden 2(al igua que para deducir el método de Lax-Wendroff).

Indique todo lo que pueda sobre dicho método: error de truncatura local, consistencia, condición CFL, estabilidad \ldots

Implemente este método a partir del código visto para el algoritmo de Lax-Wendroff para aproximar la ecuación de advección con condiciones de contorno periódicas.
#+end_wording
* Ejercicio 5
#+begin_wording
Deduce la expresión que adoptaría el método de Lax-Wendrof para arpoximar la solución de la ecuación:

\[ u_t - au_x + f(t,x) \]

Nota: Justifica para ello la identidad $u_{tt} = a^2 u_{xx} - af_x + t_t$ y emplea aproximaciones centradas en espacio para $f_x$ y progresivas en tiempo para $f_t$. ¿Sabrías decir algo sobre el error de truncatura local de este método?

Prográmalo para resolver el problema con $a = -4, u_0(x) = 1 - e^{-x^2}, f(t,x) = e^t - e^{t-(x+4t)^2}$ y simúlala en el dominio $x\in [-10, 2]$ hasta el instante de tiempo $T=1$ con condiciones periódicas.
#+end_wording

Derivando sobre $t$ y sobre $x$ en la ecuación de partida obtenemos:

\begin{align}
& u_{tt} = -au_{tx} + f_t \label{ex5:difft}\\
& u_{tx} = -au_{xx} + f_x \label{ex5:diffx}
\end{align}

Sustituyendo \eqref{ex5:diffx} en \eqref{ex5:difft} obtenemos:

\[u_{tt} = a^2u_{xx} - af_x + f_t\]
